Глава 2. TypeScript с высоты птичьего полета.

Во время компиляции ts код преобразуется на в байт-код, а в код на js, а js код уже преобразуется в байт-код. Обычная компиляция: из кода в синтаксическое дерево, затем в байт-код. После посроения синтаксического дерева происходит проверка типобезопасности.

Явное объявление типа
let a: number = 1;
let b: boolean[] = [true, false];

Js имеет динамическую типизацию, ts - статическую. Динамическая - когда тип переменной определяется во время запуска программы. При статической - во время компиляции.

Для создания приложения с ts надо:
1) Установить npm(пакетный менеджер).
npm init
npm install --save-dev typescript tslint @types/node
Создать tsconfig.json в корневом каталоге(В дальнейшем вы можете использовать встроенную команду TSC, чтобы генерировать этот файл автоматически: 
npx tsc --init)

include В каких каталогах TSC должен искать файлы TypeScript?
lib Наличие каких API в вашей среде разработки должен предполагать TSC? Это касается 
также таких элементов, как Function.prototype.bind в ES5, Object.assign в ES2015 и document 
DOM.querySelector?
module В какую модульную систему должен производить компиляцию TSC (CommonJS, SystemJS, 
ES2015 и пр.)?
outDir В какой каталог TSC должен помещать сгенерированный JavaScript-код?
strict Как производить максимально строгую проверку кода и соблюдать правильную типизацию? 
Мы будем использовать ее во всех примерах. Активируйте ее в своем проекте
target В какую версию JavaScript нужно компилировать код (ES3, ES5, ES2015, ES2016 и пр.)?

Создать tslint.json(генерация npx tslint --init)

2) Создайте каталог src, содержащий ваш первый файл TypeScript(index.ts)

3) Запуск:
npx tsc index.ts
node index.js